apply plugin: 'org.unbroken-dome.test-sets'

group = 'nl.esciencecenter.xenon.adaptors'

testSets {
    integrationTest
    fixedClientEnvironmentTest
}

integrationTest.description = 'Run the integration tests against docker containers'
fixedClientEnvironmentTest.description = 'Run the integration tests within and against docker containers, should be run within `nlesc/xenon-fixed-client` docker container'

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
    integrationTestImplementation group: 'junit', name: 'junit', version: '4.12'
    integrationTestImplementation group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: '0.33.0'

    integrationTestImplementation group: 'nl.esciencecenter.xenon', name: 'xenon-testapi', version: xenonVersion

    fixedClientEnvironmentTestCompile group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: '0.33.0'
    fixedClientEnvironmentTestCompile group: 'junit', name: 'junit', version: '4.12'
    fixedClientEnvironmentTestCompile group: 'nl.esciencecenter.xenon', name: 'xenon-testapi', version: xenonVersion
}

jacocoTestCoverageVerification.group = 'Code coverage reporting'

jacoco {
    toolVersion = "0.8.3"
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    description 'Generate coverage report of integration tests'
    group 'Code coverage reporting'
    executionData integrationTest
    sourceSets sourceSets.main
    reports {
        xml.enabled = true // codecov depends on xml format report
    }
}

task jacocoFixedClientEnvironmentTestReport(type: JacocoReport) {
    description 'Generate coverage report of fixed client environment tests'
    group 'Code coverage reporting'
    executionData fixedClientEnvironmentTest
    sourceSets sourceSets.main
    reports {
        xml.enabled = true // codecov depends on xml format report
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'xenon-middleware_xenon-adaptors-hadoop'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', "xenon-middleware"
        property 'sonar.language', 'java'
        property 'sonar.links.homepage', 'https://github.com/xenon-middleware/xenon-adaptors-hadoop'
        properties["sonar.tests"] += sourceSets.integrationTest.allSource.srcDirs
        property 'sonar.jacoco.reportPaths', [jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData]
    }
}
project.tasks["sonarqube"].dependsOn "check"
